{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "c55f1937",
   "metadata": {},
   "outputs": [],
   "source": [
    "# We've to load multiple packages to do the analysis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "8d500b6f",
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import datetime as dt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "24c4b145",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "7e19e16e",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Step 1. Importing the data"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "751ea282",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Load airbnb_price.csv in prices\n",
    "\n",
    "prices = pd.read_csv(\"prices.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "9f7553a2",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Load airbnb_room_type.xlsx in xls\n",
    "\n",
    "xls = pd.ExcelFile(\"room_types.xlsx\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "1d38138a",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Parse the first sheet from xls, room_types\n",
    "\n",
    "room_types = xls.parse(0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "cca4e2ed",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Load airbnb_last_review.tsv, reviews\n",
    "\n",
    "reviews = pd.read_csv(\"reviews.tsv\",sep = \"\\t\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "6dd3c0d5",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Display the first few rows"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "d30efa34",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>listing_id</th>\n",
       "      <th>price</th>\n",
       "      <th>nbhood_full</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2595</td>\n",
       "      <td>225</td>\n",
       "      <td>Manhattan, Midtown</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>3831</td>\n",
       "      <td>89</td>\n",
       "      <td>Brooklyn, Clinton Hill</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>5099</td>\n",
       "      <td>200</td>\n",
       "      <td>Manhattan, Murray Hill</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>5178</td>\n",
       "      <td>79</td>\n",
       "      <td>Manhattan, Hell's Kitchen</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5238</td>\n",
       "      <td>150</td>\n",
       "      <td>Manhattan, Chinatown</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   listing_id  price                nbhood_full\n",
       "0        2595    225         Manhattan, Midtown\n",
       "1        3831     89     Brooklyn, Clinton Hill\n",
       "2        5099    200     Manhattan, Murray Hill\n",
       "3        5178     79  Manhattan, Hell's Kitchen\n",
       "4        5238    150       Manhattan, Chinatown"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "prices.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "32b984ee",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>listing_id</th>\n",
       "      <th>host_name</th>\n",
       "      <th>last_review</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2595</td>\n",
       "      <td>Jennifer</td>\n",
       "      <td>May 21 2019</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>3831</td>\n",
       "      <td>LisaRoxanne</td>\n",
       "      <td>July 05 2019</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>5099</td>\n",
       "      <td>Chris</td>\n",
       "      <td>June 22 2019</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>5178</td>\n",
       "      <td>Shunichi</td>\n",
       "      <td>June 24 2019</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5238</td>\n",
       "      <td>Ben</td>\n",
       "      <td>June 09 2019</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   listing_id    host_name   last_review\n",
       "0        2595     Jennifer   May 21 2019\n",
       "1        3831  LisaRoxanne  July 05 2019\n",
       "2        5099        Chris  June 22 2019\n",
       "3        5178     Shunichi  June 24 2019\n",
       "4        5238          Ben  June 09 2019"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "reviews.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "915560fb",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>listing_id</th>\n",
       "      <th>description</th>\n",
       "      <th>room_type</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2595</td>\n",
       "      <td>Skylit Midtown Castle</td>\n",
       "      <td>Entire home/apt</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>3831</td>\n",
       "      <td>Cozy Entire Floor of Brownstone</td>\n",
       "      <td>Entire home/apt</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>5099</td>\n",
       "      <td>Large Cozy 1 BR Apartment In Midtown East</td>\n",
       "      <td>Entire home/apt</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>5178</td>\n",
       "      <td>Large Furnished Room Near B'way</td>\n",
       "      <td>private room</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5238</td>\n",
       "      <td>Cute &amp; Cozy Lower East Side 1 bdrm</td>\n",
       "      <td>Entire home/apt</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   listing_id                                description        room_type\n",
       "0        2595                      Skylit Midtown Castle  Entire home/apt\n",
       "1        3831            Cozy Entire Floor of Brownstone  Entire home/apt\n",
       "2        5099  Large Cozy 1 BR Apartment In Midtown East  Entire home/apt\n",
       "3        5178            Large Furnished Room Near B'way     private room\n",
       "4        5238         Cute & Cozy Lower East Side 1 bdrm  Entire home/apt"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "room_types.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b6498d73",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "24b5c1c2",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Check the dimensions of the dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "91027786",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(25202, 3)"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "prices.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "aa401c12",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(25209, 3)"
      ]
     },
     "execution_count": 38,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "reviews.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "5654c5f4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(25209, 3)"
      ]
     },
     "execution_count": 40,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "room_types.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "b5ebd745",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Check the data types of columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 92,
   "id": "7d841efd",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "listing_id           int64\n",
       "price                int64\n",
       "nbhood_full         object\n",
       "price_per_month    float64\n",
       "dtype: object"
      ]
     },
     "execution_count": 92,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "prices.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "id": "e749ec00",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "listing_id      int64\n",
       "host_name      object\n",
       "last_review    object\n",
       "dtype: object"
      ]
     },
     "execution_count": 43,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "reviews.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "id": "5e9e8734",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "listing_id      int64\n",
       "description    object\n",
       "room_type      object\n",
       "dtype: object"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "room_types.dtypes"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "id": "099ea109",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Get summary statistics"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "id": "dfb0aca1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>listing_id</th>\n",
       "      <th>price</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>2.520200e+04</td>\n",
       "      <td>25202.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>2.068920e+07</td>\n",
       "      <td>141.817316</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>1.103081e+07</td>\n",
       "      <td>147.350650</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>2.595000e+03</td>\n",
       "      <td>10.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>1.202115e+07</td>\n",
       "      <td>69.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>2.234547e+07</td>\n",
       "      <td>105.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>3.037697e+07</td>\n",
       "      <td>175.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>3.645581e+07</td>\n",
       "      <td>7500.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         listing_id         price\n",
       "count  2.520200e+04  25202.000000\n",
       "mean   2.068920e+07    141.817316\n",
       "std    1.103081e+07    147.350650\n",
       "min    2.595000e+03     10.000000\n",
       "25%    1.202115e+07     69.000000\n",
       "50%    2.234547e+07    105.000000\n",
       "75%    3.037697e+07    175.000000\n",
       "max    3.645581e+07   7500.000000"
      ]
     },
     "execution_count": 46,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "prices.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "id": "7181a7ab",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>listing_id</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>2.520900e+04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>2.068922e+07</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>1.102928e+07</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>2.595000e+03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>1.202273e+07</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>2.234391e+07</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>3.037669e+07</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>3.645581e+07</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         listing_id\n",
       "count  2.520900e+04\n",
       "mean   2.068922e+07\n",
       "std    1.102928e+07\n",
       "min    2.595000e+03\n",
       "25%    1.202273e+07\n",
       "50%    2.234391e+07\n",
       "75%    3.037669e+07\n",
       "max    3.645581e+07"
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "reviews.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "id": "a2dc1d02",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>listing_id</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>2.520900e+04</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>2.068922e+07</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>1.102928e+07</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>2.595000e+03</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>1.202273e+07</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>2.234391e+07</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>3.037669e+07</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>3.645581e+07</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         listing_id\n",
       "count  2.520900e+04\n",
       "mean   2.068922e+07\n",
       "std    1.102928e+07\n",
       "min    2.595000e+03\n",
       "25%    1.202273e+07\n",
       "50%    2.234391e+07\n",
       "75%    3.037669e+07\n",
       "max    3.645581e+07"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "room_types.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "id": "f2ddd62c",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Check for missing values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 50,
   "id": "62a37ca5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "listing_id     0\n",
       "price          0\n",
       "nbhood_full    0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 50,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "prices.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "id": "e9d72a6e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "listing_id     0\n",
       "host_name      8\n",
       "last_review    0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 51,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "reviews.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 52,
   "id": "41ef46ae",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "listing_id      0\n",
       "description    10\n",
       "room_type       0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 52,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "room_types.isnull().sum()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "f67d24a9",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Step 2. Cleaning the price column"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "6b84cbce",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Remove whitespace and string characters from prices column\n",
    "\n",
    "prices[\"price\"] = prices[\"price\"].str.replace(\" dollars\", \"\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "799b44f6",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Convert prices column to numeric datatype\n",
    "\n",
    "prices[\"price\"] = pd.to_numeric(prices[\"price\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "35419e3d",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "54e587e9",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Step 3. Calculating average price"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "2f147a4a",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>listing_id</th>\n",
       "      <th>price</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>2.520200e+04</td>\n",
       "      <td>25202.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>2.068920e+07</td>\n",
       "      <td>141.817316</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>1.103081e+07</td>\n",
       "      <td>147.350650</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>2.595000e+03</td>\n",
       "      <td>10.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>1.202115e+07</td>\n",
       "      <td>69.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>2.234547e+07</td>\n",
       "      <td>105.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>3.037697e+07</td>\n",
       "      <td>175.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>3.645581e+07</td>\n",
       "      <td>7500.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         listing_id         price\n",
       "count  2.520200e+04  25202.000000\n",
       "mean   2.068920e+07    141.817316\n",
       "std    1.103081e+07    147.350650\n",
       "min    2.595000e+03     10.000000\n",
       "25%    1.202115e+07     69.000000\n",
       "50%    2.234547e+07    105.000000\n",
       "75%    3.037697e+07    175.000000\n",
       "max    3.645581e+07   7500.000000"
      ]
     },
     "execution_count": 22,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "prices.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 164,
   "id": "090f021d",
   "metadata": {},
   "outputs": [],
   "source": [
    "# To Remove Outliers: Calculate the first quartile (Q1) and third quartile (Q3)\n",
    "\n",
    "Q1 = prices[\"price\"].quantile(0.25)\n",
    "Q3 = prices[\"price\"].quantile(0.75)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 165,
   "id": "64f45860",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Calculate the interquartile range (IQR)\n",
    "\n",
    "IQR = Q3 - Q1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 166,
   "id": "dbb16dbe",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Define the upper and lower bounds to identify outliers\n",
    "\n",
    "lower_bound = Q1 - 1.5 * IQR\n",
    "upper_bound = Q3 + 1.5 * IQR"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 167,
   "id": "3911a5b9",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Filter the DataFrame to remove outliers\n",
    "\n",
    "filtered_prices = prices[(prices[\"price\"] >= lower_bound) & (prices[\"price\"] <= upper_bound)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 168,
   "id": "abdde9a4",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "   listing_id  price                nbhood_full  price_per_month\n",
      "0        2595    225         Manhattan, Midtown      6843.750000\n",
      "1        3831     89     Brooklyn, Clinton Hill      2707.083333\n",
      "2        5099    200     Manhattan, Murray Hill      6083.333333\n",
      "3        5178     79  Manhattan, Hell's Kitchen      2402.916667\n",
      "4        5238    150       Manhattan, Chinatown      4562.500000\n"
     ]
    }
   ],
   "source": [
    "#  Resulting DataFrame after removing the outliers\n",
    "\n",
    "print(filtered_prices.head())  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 169,
   "id": "a2a284b5",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Subset prices for listings costing $0, free_listings\n",
    "\n",
    "free_listings = prices[\"price\"] == 0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 170,
   "id": "d81531f0",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Update prices by removing all free listings from prices\n",
    "\n",
    "prices = prices.loc[~free_listings]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 171,
   "id": "ec06a3f8",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Calculate the average price, avg_price\n",
    "\n",
    "avg_price = round(prices[\"price\"].mean(), 2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 172,
   "id": "393e86cb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "141.82"
      ]
     },
     "execution_count": 172,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "avg_price"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "id": "e4604c62",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Step 4. Comparing costs to the private rental market"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "id": "2f29ffb8",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Add a new column to the prices DataFrame, price_per_month\n",
    "\n",
    "prices[\"price_per_month\"] = prices[\"price\"] * 365 / 12"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 75,
   "id": "ea31ab7d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0        6843.750000\n",
       "1        2707.083333\n",
       "2        6083.333333\n",
       "3        2402.916667\n",
       "4        4562.500000\n",
       "            ...     \n",
       "25204    3923.750000\n",
       "25205    1368.750000\n",
       "25206    7147.916667\n",
       "25207    3041.666667\n",
       "25208     912.500000\n",
       "Name: price_per_month, Length: 25202, dtype: float64"
      ]
     },
     "execution_count": 75,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "prices[\"price_per_month\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 63,
   "id": "26645e63",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Calculate average_price_per_month\n",
    "\n",
    "average_price_per_month = round(prices[\"price_per_month\"].mean(), 2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 65,
   "id": "783de346",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "4313.61"
      ]
     },
     "execution_count": 65,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "average_price_per_month"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 173,
   "id": "3387394a",
   "metadata": {},
   "outputs": [],
   "source": [
    "# listing costs, on average, per nigh  in New York City costs, on average, $3,100 per month.  "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 68,
   "id": "36ca82cf",
   "metadata": {},
   "outputs": [],
   "source": [
    "difference = round((average_price_per_month - 3100),2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 69,
   "id": "bc4c5430",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "1213.61"
      ]
     },
     "execution_count": 69,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "difference"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ccc50511",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 80,
   "id": "42caa3fd",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Step 5. Cleaning the room_type column"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 87,
   "id": "39de7319",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Convert the room_type column to lowercase\n",
    "\n",
    "room_types[\"room_type\"] = room_types[\"room_type\"].str.lower()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 88,
   "id": "53b03bb9",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0        entire home/apt\n",
       "1        entire home/apt\n",
       "2        entire home/apt\n",
       "3           private room\n",
       "4        entire home/apt\n",
       "              ...       \n",
       "25204       private room\n",
       "25205       private room\n",
       "25206       private room\n",
       "25207    entire home/apt\n",
       "25208       private room\n",
       "Name: room_type, Length: 25209, dtype: object"
      ]
     },
     "execution_count": 88,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "room_types[\"room_type\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 93,
   "id": "ac3e8942",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Update the room_type column to category data type\n",
    "\n",
    "room_types[\"room_type\"] = room_types[\"room_type\"].astype(\"category\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 95,
   "id": "0a27296e",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "CategoricalDtype(categories=['entire home/apt', 'private room', 'shared room'], ordered=False)"
      ]
     },
     "execution_count": 95,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "room_types[\"room_type\"].dtype"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 96,
   "id": "17e07c37",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create the variable room_frequencies\n",
    "\n",
    "room_frequencies = room_types[\"room_type\"].value_counts()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 97,
   "id": "1eeea80c",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "entire home/apt    13266\n",
       "private room       11356\n",
       "shared room          587\n",
       "Name: room_type, dtype: int64"
      ]
     },
     "execution_count": 97,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "room_frequencies"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "ef187c3d",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 98,
   "id": "5ceb28d2",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Step 6. What timeframe are we working with?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 99,
   "id": "da3b3f5c",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Change the data type of the last_review column to datetime\n",
    "\n",
    "reviews[\"last_review\"] = pd.to_datetime(reviews[\"last_review\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 105,
   "id": "965440a2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "dtype('<M8[ns]')"
      ]
     },
     "execution_count": 105,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "reviews[\"last_review\"].dtype"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 106,
   "id": "d4dffada",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create first_reviewed, the earliest review date\n",
    "\n",
    "first_reviewed = reviews[\"last_review\"].dt.date.min()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 107,
   "id": "391ecbda",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "datetime.date(2019, 1, 1)"
      ]
     },
     "execution_count": 107,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "first_reviewed"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 108,
   "id": "a9c1e29a",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create last_reviewed, the most recent review date\n",
    "\n",
    "last_reviewed = reviews[\"last_review\"].dt.date.max()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 109,
   "id": "c0729703",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "datetime.date(2019, 7, 9)"
      ]
     },
     "execution_count": 109,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "last_reviewed"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "84ab9f68",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 110,
   "id": "696ccadf",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Step 7. Joining the DataFrames"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 111,
   "id": "b000bfce",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Merge prices and room_types to create rooms_and_prices\n",
    "\n",
    "rooms_and_prices = prices.merge(room_types, how=\"outer\", on=\"listing_id\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 118,
   "id": "bb657bde",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>listing_id</th>\n",
       "      <th>price</th>\n",
       "      <th>nbhood_full</th>\n",
       "      <th>price_per_month</th>\n",
       "      <th>description</th>\n",
       "      <th>room_type</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2595</td>\n",
       "      <td>225.0</td>\n",
       "      <td>Manhattan, Midtown</td>\n",
       "      <td>6843.750000</td>\n",
       "      <td>Skylit Midtown Castle</td>\n",
       "      <td>entire home/apt</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>3831</td>\n",
       "      <td>89.0</td>\n",
       "      <td>Brooklyn, Clinton Hill</td>\n",
       "      <td>2707.083333</td>\n",
       "      <td>Cozy Entire Floor of Brownstone</td>\n",
       "      <td>entire home/apt</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>5099</td>\n",
       "      <td>200.0</td>\n",
       "      <td>Manhattan, Murray Hill</td>\n",
       "      <td>6083.333333</td>\n",
       "      <td>Large Cozy 1 BR Apartment In Midtown East</td>\n",
       "      <td>entire home/apt</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>5178</td>\n",
       "      <td>79.0</td>\n",
       "      <td>Manhattan, Hell's Kitchen</td>\n",
       "      <td>2402.916667</td>\n",
       "      <td>Large Furnished Room Near B'way</td>\n",
       "      <td>private room</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5238</td>\n",
       "      <td>150.0</td>\n",
       "      <td>Manhattan, Chinatown</td>\n",
       "      <td>4562.500000</td>\n",
       "      <td>Cute &amp; Cozy Lower East Side 1 bdrm</td>\n",
       "      <td>entire home/apt</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25204</th>\n",
       "      <td>20639628</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Spacious comfortable master bedroom with nice ...</td>\n",
       "      <td>private room</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25205</th>\n",
       "      <td>20639792</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Contemporary bedroom in brownstone with nice view</td>\n",
       "      <td>private room</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25206</th>\n",
       "      <td>20639914</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Cozy yet spacious private brownstone bedroom</td>\n",
       "      <td>private room</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25207</th>\n",
       "      <td>21291569</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Coliving in Brooklyn! Modern design / Shared room</td>\n",
       "      <td>shared room</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25208</th>\n",
       "      <td>21304320</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Best Coliving space ever! Shared room.</td>\n",
       "      <td>shared room</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>25209 rows × 6 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       listing_id  price                nbhood_full  price_per_month  \\\n",
       "0            2595  225.0         Manhattan, Midtown      6843.750000   \n",
       "1            3831   89.0     Brooklyn, Clinton Hill      2707.083333   \n",
       "2            5099  200.0     Manhattan, Murray Hill      6083.333333   \n",
       "3            5178   79.0  Manhattan, Hell's Kitchen      2402.916667   \n",
       "4            5238  150.0       Manhattan, Chinatown      4562.500000   \n",
       "...           ...    ...                        ...              ...   \n",
       "25204    20639628    NaN                        NaN              NaN   \n",
       "25205    20639792    NaN                        NaN              NaN   \n",
       "25206    20639914    NaN                        NaN              NaN   \n",
       "25207    21291569    NaN                        NaN              NaN   \n",
       "25208    21304320    NaN                        NaN              NaN   \n",
       "\n",
       "                                             description        room_type  \n",
       "0                                  Skylit Midtown Castle  entire home/apt  \n",
       "1                        Cozy Entire Floor of Brownstone  entire home/apt  \n",
       "2              Large Cozy 1 BR Apartment In Midtown East  entire home/apt  \n",
       "3                        Large Furnished Room Near B'way     private room  \n",
       "4                     Cute & Cozy Lower East Side 1 bdrm  entire home/apt  \n",
       "...                                                  ...              ...  \n",
       "25204  Spacious comfortable master bedroom with nice ...     private room  \n",
       "25205  Contemporary bedroom in brownstone with nice view     private room  \n",
       "25206       Cozy yet spacious private brownstone bedroom     private room  \n",
       "25207  Coliving in Brooklyn! Modern design / Shared room      shared room  \n",
       "25208             Best Coliving space ever! Shared room.      shared room  \n",
       "\n",
       "[25209 rows x 6 columns]"
      ]
     },
     "execution_count": 118,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rooms_and_prices"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 112,
   "id": "ab89f769",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(25209, 6)"
      ]
     },
     "execution_count": 112,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rooms_and_prices.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 113,
   "id": "a09faf6d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>listing_id</th>\n",
       "      <th>price</th>\n",
       "      <th>price_per_month</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>2.520900e+04</td>\n",
       "      <td>25202.000000</td>\n",
       "      <td>25202.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>2.068922e+07</td>\n",
       "      <td>141.817316</td>\n",
       "      <td>4313.610031</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>1.102928e+07</td>\n",
       "      <td>147.350650</td>\n",
       "      <td>4481.915598</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>2.595000e+03</td>\n",
       "      <td>10.000000</td>\n",
       "      <td>304.166667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>1.202273e+07</td>\n",
       "      <td>69.000000</td>\n",
       "      <td>2098.750000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>2.234391e+07</td>\n",
       "      <td>105.000000</td>\n",
       "      <td>3193.750000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>3.037669e+07</td>\n",
       "      <td>175.000000</td>\n",
       "      <td>5322.916667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>3.645581e+07</td>\n",
       "      <td>7500.000000</td>\n",
       "      <td>228125.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         listing_id         price  price_per_month\n",
       "count  2.520900e+04  25202.000000     25202.000000\n",
       "mean   2.068922e+07    141.817316      4313.610031\n",
       "std    1.102928e+07    147.350650      4481.915598\n",
       "min    2.595000e+03     10.000000       304.166667\n",
       "25%    1.202273e+07     69.000000      2098.750000\n",
       "50%    2.234391e+07    105.000000      3193.750000\n",
       "75%    3.037669e+07    175.000000      5322.916667\n",
       "max    3.645581e+07   7500.000000    228125.000000"
      ]
     },
     "execution_count": 113,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "rooms_and_prices.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 116,
   "id": "d97bca52",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Merge rooms_and_prices with the reviews DataFrame to create airbnb_merged\n",
    "\n",
    "airbnb_merged = rooms_and_prices.merge(reviews, how=\"outer\", on=\"listing_id\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 119,
   "id": "9fcfe4f2",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(25209, 8)"
      ]
     },
     "execution_count": 119,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "airbnb_merged.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 120,
   "id": "396dff85",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>listing_id</th>\n",
       "      <th>price</th>\n",
       "      <th>price_per_month</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>2.520900e+04</td>\n",
       "      <td>25202.000000</td>\n",
       "      <td>25202.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>2.068922e+07</td>\n",
       "      <td>141.817316</td>\n",
       "      <td>4313.610031</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>1.102928e+07</td>\n",
       "      <td>147.350650</td>\n",
       "      <td>4481.915598</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>2.595000e+03</td>\n",
       "      <td>10.000000</td>\n",
       "      <td>304.166667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>1.202273e+07</td>\n",
       "      <td>69.000000</td>\n",
       "      <td>2098.750000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>2.234391e+07</td>\n",
       "      <td>105.000000</td>\n",
       "      <td>3193.750000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>3.037669e+07</td>\n",
       "      <td>175.000000</td>\n",
       "      <td>5322.916667</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>3.645581e+07</td>\n",
       "      <td>7500.000000</td>\n",
       "      <td>228125.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         listing_id         price  price_per_month\n",
       "count  2.520900e+04  25202.000000     25202.000000\n",
       "mean   2.068922e+07    141.817316      4313.610031\n",
       "std    1.102928e+07    147.350650      4481.915598\n",
       "min    2.595000e+03     10.000000       304.166667\n",
       "25%    1.202273e+07     69.000000      2098.750000\n",
       "50%    2.234391e+07    105.000000      3193.750000\n",
       "75%    3.037669e+07    175.000000      5322.916667\n",
       "max    3.645581e+07   7500.000000    228125.000000"
      ]
     },
     "execution_count": 120,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "airbnb_merged.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 117,
   "id": "7a9c1d9c",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>listing_id</th>\n",
       "      <th>price</th>\n",
       "      <th>nbhood_full</th>\n",
       "      <th>price_per_month</th>\n",
       "      <th>description</th>\n",
       "      <th>room_type</th>\n",
       "      <th>host_name</th>\n",
       "      <th>last_review</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2595</td>\n",
       "      <td>225.0</td>\n",
       "      <td>Manhattan, Midtown</td>\n",
       "      <td>6843.750000</td>\n",
       "      <td>Skylit Midtown Castle</td>\n",
       "      <td>entire home/apt</td>\n",
       "      <td>Jennifer</td>\n",
       "      <td>2019-05-21</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>3831</td>\n",
       "      <td>89.0</td>\n",
       "      <td>Brooklyn, Clinton Hill</td>\n",
       "      <td>2707.083333</td>\n",
       "      <td>Cozy Entire Floor of Brownstone</td>\n",
       "      <td>entire home/apt</td>\n",
       "      <td>LisaRoxanne</td>\n",
       "      <td>2019-07-05</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>5099</td>\n",
       "      <td>200.0</td>\n",
       "      <td>Manhattan, Murray Hill</td>\n",
       "      <td>6083.333333</td>\n",
       "      <td>Large Cozy 1 BR Apartment In Midtown East</td>\n",
       "      <td>entire home/apt</td>\n",
       "      <td>Chris</td>\n",
       "      <td>2019-06-22</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>5178</td>\n",
       "      <td>79.0</td>\n",
       "      <td>Manhattan, Hell's Kitchen</td>\n",
       "      <td>2402.916667</td>\n",
       "      <td>Large Furnished Room Near B'way</td>\n",
       "      <td>private room</td>\n",
       "      <td>Shunichi</td>\n",
       "      <td>2019-06-24</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5238</td>\n",
       "      <td>150.0</td>\n",
       "      <td>Manhattan, Chinatown</td>\n",
       "      <td>4562.500000</td>\n",
       "      <td>Cute &amp; Cozy Lower East Side 1 bdrm</td>\n",
       "      <td>entire home/apt</td>\n",
       "      <td>Ben</td>\n",
       "      <td>2019-06-09</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25204</th>\n",
       "      <td>20639628</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Spacious comfortable master bedroom with nice ...</td>\n",
       "      <td>private room</td>\n",
       "      <td>Adeyemi</td>\n",
       "      <td>2019-06-15</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25205</th>\n",
       "      <td>20639792</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Contemporary bedroom in brownstone with nice view</td>\n",
       "      <td>private room</td>\n",
       "      <td>Adeyemi</td>\n",
       "      <td>2019-06-21</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25206</th>\n",
       "      <td>20639914</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Cozy yet spacious private brownstone bedroom</td>\n",
       "      <td>private room</td>\n",
       "      <td>Adeyemi</td>\n",
       "      <td>2019-06-23</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25207</th>\n",
       "      <td>21291569</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Coliving in Brooklyn! Modern design / Shared room</td>\n",
       "      <td>shared room</td>\n",
       "      <td>Sergii</td>\n",
       "      <td>2019-06-22</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25208</th>\n",
       "      <td>21304320</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>Best Coliving space ever! Shared room.</td>\n",
       "      <td>shared room</td>\n",
       "      <td>Sergii</td>\n",
       "      <td>2019-05-24</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>25209 rows × 8 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       listing_id  price                nbhood_full  price_per_month  \\\n",
       "0            2595  225.0         Manhattan, Midtown      6843.750000   \n",
       "1            3831   89.0     Brooklyn, Clinton Hill      2707.083333   \n",
       "2            5099  200.0     Manhattan, Murray Hill      6083.333333   \n",
       "3            5178   79.0  Manhattan, Hell's Kitchen      2402.916667   \n",
       "4            5238  150.0       Manhattan, Chinatown      4562.500000   \n",
       "...           ...    ...                        ...              ...   \n",
       "25204    20639628    NaN                        NaN              NaN   \n",
       "25205    20639792    NaN                        NaN              NaN   \n",
       "25206    20639914    NaN                        NaN              NaN   \n",
       "25207    21291569    NaN                        NaN              NaN   \n",
       "25208    21304320    NaN                        NaN              NaN   \n",
       "\n",
       "                                             description        room_type  \\\n",
       "0                                  Skylit Midtown Castle  entire home/apt   \n",
       "1                        Cozy Entire Floor of Brownstone  entire home/apt   \n",
       "2              Large Cozy 1 BR Apartment In Midtown East  entire home/apt   \n",
       "3                        Large Furnished Room Near B'way     private room   \n",
       "4                     Cute & Cozy Lower East Side 1 bdrm  entire home/apt   \n",
       "...                                                  ...              ...   \n",
       "25204  Spacious comfortable master bedroom with nice ...     private room   \n",
       "25205  Contemporary bedroom in brownstone with nice view     private room   \n",
       "25206       Cozy yet spacious private brownstone bedroom     private room   \n",
       "25207  Coliving in Brooklyn! Modern design / Shared room      shared room   \n",
       "25208             Best Coliving space ever! Shared room.      shared room   \n",
       "\n",
       "         host_name last_review  \n",
       "0         Jennifer  2019-05-21  \n",
       "1      LisaRoxanne  2019-07-05  \n",
       "2            Chris  2019-06-22  \n",
       "3         Shunichi  2019-06-24  \n",
       "4              Ben  2019-06-09  \n",
       "...            ...         ...  \n",
       "25204      Adeyemi  2019-06-15  \n",
       "25205      Adeyemi  2019-06-21  \n",
       "25206      Adeyemi  2019-06-23  \n",
       "25207       Sergii  2019-06-22  \n",
       "25208       Sergii  2019-05-24  \n",
       "\n",
       "[25209 rows x 8 columns]"
      ]
     },
     "execution_count": 117,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "airbnb_merged"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 121,
   "id": "f8860218",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Drop missing values from airbnb_merged\n",
    "\n",
    "airbnb_merged.dropna(inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 174,
   "id": "6b38a6cc",
   "metadata": {
    "scrolled": false
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>listing_id</th>\n",
       "      <th>price</th>\n",
       "      <th>nbhood_full</th>\n",
       "      <th>price_per_month</th>\n",
       "      <th>description</th>\n",
       "      <th>room_type</th>\n",
       "      <th>host_name</th>\n",
       "      <th>last_review</th>\n",
       "      <th>borough</th>\n",
       "      <th>price_range</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2595</td>\n",
       "      <td>225.0</td>\n",
       "      <td>Manhattan, Midtown</td>\n",
       "      <td>6843.750000</td>\n",
       "      <td>Skylit Midtown Castle</td>\n",
       "      <td>entire home/apt</td>\n",
       "      <td>Jennifer</td>\n",
       "      <td>2019-05-21</td>\n",
       "      <td>Manhattan</td>\n",
       "      <td>Expensive</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>3831</td>\n",
       "      <td>89.0</td>\n",
       "      <td>Brooklyn, Clinton Hill</td>\n",
       "      <td>2707.083333</td>\n",
       "      <td>Cozy Entire Floor of Brownstone</td>\n",
       "      <td>entire home/apt</td>\n",
       "      <td>LisaRoxanne</td>\n",
       "      <td>2019-07-05</td>\n",
       "      <td>Brooklyn</td>\n",
       "      <td>Average</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>5099</td>\n",
       "      <td>200.0</td>\n",
       "      <td>Manhattan, Murray Hill</td>\n",
       "      <td>6083.333333</td>\n",
       "      <td>Large Cozy 1 BR Apartment In Midtown East</td>\n",
       "      <td>entire home/apt</td>\n",
       "      <td>Chris</td>\n",
       "      <td>2019-06-22</td>\n",
       "      <td>Manhattan</td>\n",
       "      <td>Expensive</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>5178</td>\n",
       "      <td>79.0</td>\n",
       "      <td>Manhattan, Hell's Kitchen</td>\n",
       "      <td>2402.916667</td>\n",
       "      <td>Large Furnished Room Near B'way</td>\n",
       "      <td>private room</td>\n",
       "      <td>Shunichi</td>\n",
       "      <td>2019-06-24</td>\n",
       "      <td>Manhattan</td>\n",
       "      <td>Average</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5238</td>\n",
       "      <td>150.0</td>\n",
       "      <td>Manhattan, Chinatown</td>\n",
       "      <td>4562.500000</td>\n",
       "      <td>Cute &amp; Cozy Lower East Side 1 bdrm</td>\n",
       "      <td>entire home/apt</td>\n",
       "      <td>Ben</td>\n",
       "      <td>2019-06-09</td>\n",
       "      <td>Manhattan</td>\n",
       "      <td>Average</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25197</th>\n",
       "      <td>36425863</td>\n",
       "      <td>129.0</td>\n",
       "      <td>Manhattan, Upper East Side</td>\n",
       "      <td>3923.750000</td>\n",
       "      <td>Lovely Privet Bedroom with Privet Restroom</td>\n",
       "      <td>private room</td>\n",
       "      <td>Rusaa</td>\n",
       "      <td>2019-07-07</td>\n",
       "      <td>Manhattan</td>\n",
       "      <td>Average</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25198</th>\n",
       "      <td>36427429</td>\n",
       "      <td>45.0</td>\n",
       "      <td>Queens, Flushing</td>\n",
       "      <td>1368.750000</td>\n",
       "      <td>No.2 with queen size bed</td>\n",
       "      <td>private room</td>\n",
       "      <td>H Ai</td>\n",
       "      <td>2019-07-07</td>\n",
       "      <td>Queens</td>\n",
       "      <td>Budget</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25199</th>\n",
       "      <td>36438336</td>\n",
       "      <td>235.0</td>\n",
       "      <td>Staten Island, Great Kills</td>\n",
       "      <td>7147.916667</td>\n",
       "      <td>Seas The Moment</td>\n",
       "      <td>private room</td>\n",
       "      <td>Ben</td>\n",
       "      <td>2019-07-07</td>\n",
       "      <td>Staten Island</td>\n",
       "      <td>Expensive</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25200</th>\n",
       "      <td>36442252</td>\n",
       "      <td>100.0</td>\n",
       "      <td>Bronx, Mott Haven</td>\n",
       "      <td>3041.666667</td>\n",
       "      <td>1B-1B apartment near by Metro</td>\n",
       "      <td>entire home/apt</td>\n",
       "      <td>Blaine</td>\n",
       "      <td>2019-07-07</td>\n",
       "      <td>Bronx</td>\n",
       "      <td>Average</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25201</th>\n",
       "      <td>36455809</td>\n",
       "      <td>30.0</td>\n",
       "      <td>Brooklyn, Bushwick</td>\n",
       "      <td>912.500000</td>\n",
       "      <td>Cozy Private Room in Bushwick, Brooklyn</td>\n",
       "      <td>private room</td>\n",
       "      <td>Christine</td>\n",
       "      <td>2019-07-08</td>\n",
       "      <td>Brooklyn</td>\n",
       "      <td>Budget</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>25184 rows × 10 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       listing_id  price                 nbhood_full  price_per_month  \\\n",
       "0            2595  225.0          Manhattan, Midtown      6843.750000   \n",
       "1            3831   89.0      Brooklyn, Clinton Hill      2707.083333   \n",
       "2            5099  200.0      Manhattan, Murray Hill      6083.333333   \n",
       "3            5178   79.0   Manhattan, Hell's Kitchen      2402.916667   \n",
       "4            5238  150.0        Manhattan, Chinatown      4562.500000   \n",
       "...           ...    ...                         ...              ...   \n",
       "25197    36425863  129.0  Manhattan, Upper East Side      3923.750000   \n",
       "25198    36427429   45.0            Queens, Flushing      1368.750000   \n",
       "25199    36438336  235.0  Staten Island, Great Kills      7147.916667   \n",
       "25200    36442252  100.0           Bronx, Mott Haven      3041.666667   \n",
       "25201    36455809   30.0          Brooklyn, Bushwick       912.500000   \n",
       "\n",
       "                                      description        room_type  \\\n",
       "0                           Skylit Midtown Castle  entire home/apt   \n",
       "1                 Cozy Entire Floor of Brownstone  entire home/apt   \n",
       "2       Large Cozy 1 BR Apartment In Midtown East  entire home/apt   \n",
       "3                 Large Furnished Room Near B'way     private room   \n",
       "4              Cute & Cozy Lower East Side 1 bdrm  entire home/apt   \n",
       "...                                           ...              ...   \n",
       "25197  Lovely Privet Bedroom with Privet Restroom     private room   \n",
       "25198                    No.2 with queen size bed     private room   \n",
       "25199                             Seas The Moment     private room   \n",
       "25200               1B-1B apartment near by Metro  entire home/apt   \n",
       "25201     Cozy Private Room in Bushwick, Brooklyn     private room   \n",
       "\n",
       "         host_name last_review        borough price_range  \n",
       "0         Jennifer  2019-05-21      Manhattan   Expensive  \n",
       "1      LisaRoxanne  2019-07-05       Brooklyn     Average  \n",
       "2            Chris  2019-06-22      Manhattan   Expensive  \n",
       "3         Shunichi  2019-06-24      Manhattan     Average  \n",
       "4              Ben  2019-06-09      Manhattan     Average  \n",
       "...            ...         ...            ...         ...  \n",
       "25197        Rusaa  2019-07-07      Manhattan     Average  \n",
       "25198         H Ai  2019-07-07         Queens      Budget  \n",
       "25199          Ben  2019-07-07  Staten Island   Expensive  \n",
       "25200       Blaine  2019-07-07          Bronx     Average  \n",
       "25201    Christine  2019-07-08       Brooklyn      Budget  \n",
       "\n",
       "[25184 rows x 10 columns]"
      ]
     },
     "execution_count": 174,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "airbnb_merged"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 175,
   "id": "44caa8a1",
   "metadata": {},
   "outputs": [],
   "source": [
    "# check for duplicates.\n",
    "duplicates = airbnb_merged[airbnb_merged.duplicated(keep=False)]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 176,
   "id": "f1fe5bf2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Empty DataFrame\n",
      "Columns: [listing_id, price, nbhood_full, price_per_month, description, room_type, host_name, last_review, borough, price_range]\n",
      "Index: []\n"
     ]
    }
   ],
   "source": [
    "print(duplicates)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "aad95760",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 123,
   "id": "bdb42de6",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Step 8. Analyzing listing prices by NYC borough"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 131,
   "id": "e0673f73",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Extract information from the nbhood_full column and store as a new column, borough\n",
    "\n",
    "airbnb_merged[\"borough\"] = airbnb_merged[\"nbhood_full\"].str.partition(\",\")[0]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 134,
   "id": "24b8489a",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0            Manhattan\n",
      "1             Brooklyn\n",
      "2            Manhattan\n",
      "3            Manhattan\n",
      "4            Manhattan\n",
      "             ...      \n",
      "25197        Manhattan\n",
      "25198           Queens\n",
      "25199    Staten Island\n",
      "25200            Bronx\n",
      "25201         Brooklyn\n",
      "Name: borough, Length: 25184, dtype: object\n"
     ]
    }
   ],
   "source": [
    "print(airbnb_merged[\"borough\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 135,
   "id": "a1eab229",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Group by borough and calculate summary statistics\n",
    "\n",
    "boroughs = airbnb_merged.groupby(\"borough\")[\"price\"].agg([\"sum\", \"mean\", \"median\", \"count\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 137,
   "id": "448807d5",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>sum</th>\n",
       "      <th>mean</th>\n",
       "      <th>median</th>\n",
       "      <th>count</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>borough</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Bronx</th>\n",
       "      <td>55156.0</td>\n",
       "      <td>79.247126</td>\n",
       "      <td>65.0</td>\n",
       "      <td>696</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Brooklyn</th>\n",
       "      <td>1275250.0</td>\n",
       "      <td>122.021816</td>\n",
       "      <td>95.0</td>\n",
       "      <td>10451</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Manhattan</th>\n",
       "      <td>1898417.0</td>\n",
       "      <td>184.044304</td>\n",
       "      <td>149.0</td>\n",
       "      <td>10315</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Queens</th>\n",
       "      <td>320715.0</td>\n",
       "      <td>92.826339</td>\n",
       "      <td>70.0</td>\n",
       "      <td>3455</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Staten Island</th>\n",
       "      <td>22974.0</td>\n",
       "      <td>86.044944</td>\n",
       "      <td>71.0</td>\n",
       "      <td>267</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                     sum        mean  median  count\n",
       "borough                                            \n",
       "Bronx            55156.0   79.247126    65.0    696\n",
       "Brooklyn       1275250.0  122.021816    95.0  10451\n",
       "Manhattan      1898417.0  184.044304   149.0  10315\n",
       "Queens          320715.0   92.826339    70.0   3455\n",
       "Staten Island    22974.0   86.044944    71.0    267"
      ]
     },
     "execution_count": 137,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "boroughs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 138,
   "id": "5346dc45",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Round boroughs to 2 decimal places, and sort by mean in descending order\n",
    "\n",
    "boroughs = boroughs.round(2).sort_values(\"mean\", ascending=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 139,
   "id": "79d9cf3d",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>sum</th>\n",
       "      <th>mean</th>\n",
       "      <th>median</th>\n",
       "      <th>count</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>borough</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Manhattan</th>\n",
       "      <td>1898417.0</td>\n",
       "      <td>184.04</td>\n",
       "      <td>149.0</td>\n",
       "      <td>10315</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Brooklyn</th>\n",
       "      <td>1275250.0</td>\n",
       "      <td>122.02</td>\n",
       "      <td>95.0</td>\n",
       "      <td>10451</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Queens</th>\n",
       "      <td>320715.0</td>\n",
       "      <td>92.83</td>\n",
       "      <td>70.0</td>\n",
       "      <td>3455</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Staten Island</th>\n",
       "      <td>22974.0</td>\n",
       "      <td>86.04</td>\n",
       "      <td>71.0</td>\n",
       "      <td>267</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Bronx</th>\n",
       "      <td>55156.0</td>\n",
       "      <td>79.25</td>\n",
       "      <td>65.0</td>\n",
       "      <td>696</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                     sum    mean  median  count\n",
       "borough                                        \n",
       "Manhattan      1898417.0  184.04   149.0  10315\n",
       "Brooklyn       1275250.0  122.02    95.0  10451\n",
       "Queens          320715.0   92.83    70.0   3455\n",
       "Staten Island    22974.0   86.04    71.0    267\n",
       "Bronx            55156.0   79.25    65.0    696"
      ]
     },
     "execution_count": 139,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "boroughs"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2992c07d",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 140,
   "id": "74af393b",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Step 9. Price range by borough"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 141,
   "id": "dd10887c",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create labels for the price range, label_names\n",
    "\n",
    "label_names = [\"Budget\", \"Average\", \"Expensive\", \"Extravagant\"]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 142,
   "id": "d2abb36b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['Budget', 'Average', 'Expensive', 'Extravagant']"
      ]
     },
     "execution_count": 142,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "label_names"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 143,
   "id": "e9023e63",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create the label ranges, ranges\n",
    "\n",
    "ranges = [0, 69, 175, 350, np.inf]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 145,
   "id": "98b6aadd",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[0, 69, 175, 350, inf]"
      ]
     },
     "execution_count": 145,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "ranges"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 146,
   "id": "9b81f361",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Insert new column, price_range, into DataFrame\n",
    "\n",
    "airbnb_merged[\"price_range\"] = pd.cut(airbnb_merged[\"price\"], bins=ranges, labels=label_names)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 152,
   "id": "f492a6bb",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>listing_id</th>\n",
       "      <th>price</th>\n",
       "      <th>nbhood_full</th>\n",
       "      <th>price_per_month</th>\n",
       "      <th>description</th>\n",
       "      <th>room_type</th>\n",
       "      <th>host_name</th>\n",
       "      <th>last_review</th>\n",
       "      <th>borough</th>\n",
       "      <th>price_range</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>2595</td>\n",
       "      <td>225.0</td>\n",
       "      <td>Manhattan, Midtown</td>\n",
       "      <td>6843.750000</td>\n",
       "      <td>Skylit Midtown Castle</td>\n",
       "      <td>entire home/apt</td>\n",
       "      <td>Jennifer</td>\n",
       "      <td>2019-05-21</td>\n",
       "      <td>Manhattan</td>\n",
       "      <td>Expensive</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>3831</td>\n",
       "      <td>89.0</td>\n",
       "      <td>Brooklyn, Clinton Hill</td>\n",
       "      <td>2707.083333</td>\n",
       "      <td>Cozy Entire Floor of Brownstone</td>\n",
       "      <td>entire home/apt</td>\n",
       "      <td>LisaRoxanne</td>\n",
       "      <td>2019-07-05</td>\n",
       "      <td>Brooklyn</td>\n",
       "      <td>Average</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>5099</td>\n",
       "      <td>200.0</td>\n",
       "      <td>Manhattan, Murray Hill</td>\n",
       "      <td>6083.333333</td>\n",
       "      <td>Large Cozy 1 BR Apartment In Midtown East</td>\n",
       "      <td>entire home/apt</td>\n",
       "      <td>Chris</td>\n",
       "      <td>2019-06-22</td>\n",
       "      <td>Manhattan</td>\n",
       "      <td>Expensive</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>5178</td>\n",
       "      <td>79.0</td>\n",
       "      <td>Manhattan, Hell's Kitchen</td>\n",
       "      <td>2402.916667</td>\n",
       "      <td>Large Furnished Room Near B'way</td>\n",
       "      <td>private room</td>\n",
       "      <td>Shunichi</td>\n",
       "      <td>2019-06-24</td>\n",
       "      <td>Manhattan</td>\n",
       "      <td>Average</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5238</td>\n",
       "      <td>150.0</td>\n",
       "      <td>Manhattan, Chinatown</td>\n",
       "      <td>4562.500000</td>\n",
       "      <td>Cute &amp; Cozy Lower East Side 1 bdrm</td>\n",
       "      <td>entire home/apt</td>\n",
       "      <td>Ben</td>\n",
       "      <td>2019-06-09</td>\n",
       "      <td>Manhattan</td>\n",
       "      <td>Average</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25197</th>\n",
       "      <td>36425863</td>\n",
       "      <td>129.0</td>\n",
       "      <td>Manhattan, Upper East Side</td>\n",
       "      <td>3923.750000</td>\n",
       "      <td>Lovely Privet Bedroom with Privet Restroom</td>\n",
       "      <td>private room</td>\n",
       "      <td>Rusaa</td>\n",
       "      <td>2019-07-07</td>\n",
       "      <td>Manhattan</td>\n",
       "      <td>Average</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25198</th>\n",
       "      <td>36427429</td>\n",
       "      <td>45.0</td>\n",
       "      <td>Queens, Flushing</td>\n",
       "      <td>1368.750000</td>\n",
       "      <td>No.2 with queen size bed</td>\n",
       "      <td>private room</td>\n",
       "      <td>H Ai</td>\n",
       "      <td>2019-07-07</td>\n",
       "      <td>Queens</td>\n",
       "      <td>Budget</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25199</th>\n",
       "      <td>36438336</td>\n",
       "      <td>235.0</td>\n",
       "      <td>Staten Island, Great Kills</td>\n",
       "      <td>7147.916667</td>\n",
       "      <td>Seas The Moment</td>\n",
       "      <td>private room</td>\n",
       "      <td>Ben</td>\n",
       "      <td>2019-07-07</td>\n",
       "      <td>Staten Island</td>\n",
       "      <td>Expensive</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25200</th>\n",
       "      <td>36442252</td>\n",
       "      <td>100.0</td>\n",
       "      <td>Bronx, Mott Haven</td>\n",
       "      <td>3041.666667</td>\n",
       "      <td>1B-1B apartment near by Metro</td>\n",
       "      <td>entire home/apt</td>\n",
       "      <td>Blaine</td>\n",
       "      <td>2019-07-07</td>\n",
       "      <td>Bronx</td>\n",
       "      <td>Average</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25201</th>\n",
       "      <td>36455809</td>\n",
       "      <td>30.0</td>\n",
       "      <td>Brooklyn, Bushwick</td>\n",
       "      <td>912.500000</td>\n",
       "      <td>Cozy Private Room in Bushwick, Brooklyn</td>\n",
       "      <td>private room</td>\n",
       "      <td>Christine</td>\n",
       "      <td>2019-07-08</td>\n",
       "      <td>Brooklyn</td>\n",
       "      <td>Budget</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>25184 rows × 10 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       listing_id  price                 nbhood_full  price_per_month  \\\n",
       "0            2595  225.0          Manhattan, Midtown      6843.750000   \n",
       "1            3831   89.0      Brooklyn, Clinton Hill      2707.083333   \n",
       "2            5099  200.0      Manhattan, Murray Hill      6083.333333   \n",
       "3            5178   79.0   Manhattan, Hell's Kitchen      2402.916667   \n",
       "4            5238  150.0        Manhattan, Chinatown      4562.500000   \n",
       "...           ...    ...                         ...              ...   \n",
       "25197    36425863  129.0  Manhattan, Upper East Side      3923.750000   \n",
       "25198    36427429   45.0            Queens, Flushing      1368.750000   \n",
       "25199    36438336  235.0  Staten Island, Great Kills      7147.916667   \n",
       "25200    36442252  100.0           Bronx, Mott Haven      3041.666667   \n",
       "25201    36455809   30.0          Brooklyn, Bushwick       912.500000   \n",
       "\n",
       "                                      description        room_type  \\\n",
       "0                           Skylit Midtown Castle  entire home/apt   \n",
       "1                 Cozy Entire Floor of Brownstone  entire home/apt   \n",
       "2       Large Cozy 1 BR Apartment In Midtown East  entire home/apt   \n",
       "3                 Large Furnished Room Near B'way     private room   \n",
       "4              Cute & Cozy Lower East Side 1 bdrm  entire home/apt   \n",
       "...                                           ...              ...   \n",
       "25197  Lovely Privet Bedroom with Privet Restroom     private room   \n",
       "25198                    No.2 with queen size bed     private room   \n",
       "25199                             Seas The Moment     private room   \n",
       "25200               1B-1B apartment near by Metro  entire home/apt   \n",
       "25201     Cozy Private Room in Bushwick, Brooklyn     private room   \n",
       "\n",
       "         host_name last_review        borough price_range  \n",
       "0         Jennifer  2019-05-21      Manhattan   Expensive  \n",
       "1      LisaRoxanne  2019-07-05       Brooklyn     Average  \n",
       "2            Chris  2019-06-22      Manhattan   Expensive  \n",
       "3         Shunichi  2019-06-24      Manhattan     Average  \n",
       "4              Ben  2019-06-09      Manhattan     Average  \n",
       "...            ...         ...            ...         ...  \n",
       "25197        Rusaa  2019-07-07      Manhattan     Average  \n",
       "25198         H Ai  2019-07-07         Queens      Budget  \n",
       "25199          Ben  2019-07-07  Staten Island   Expensive  \n",
       "25200       Blaine  2019-07-07          Bronx     Average  \n",
       "25201    Christine  2019-07-08       Brooklyn      Budget  \n",
       "\n",
       "[25184 rows x 10 columns]"
      ]
     },
     "execution_count": 152,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "airbnb_merged"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 153,
   "id": "838766d5",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Calculate occurence frequencies for each label, prices_by_borough\n",
    "\n",
    "prices_by_borough = airbnb_merged.groupby([\"borough\", \"price_range\"])[\"price_range\"].count()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 157,
   "id": "7d099e17",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "borough        price_range\n",
       "Bronx          Budget          381\n",
       "               Average         285\n",
       "               Expensive        25\n",
       "               Extravagant       5\n",
       "Brooklyn       Budget         3194\n",
       "               Average        5532\n",
       "               Expensive      1466\n",
       "               Extravagant     259\n",
       "Manhattan      Budget         1148\n",
       "               Average        5285\n",
       "               Expensive      3072\n",
       "               Extravagant     810\n",
       "Queens         Budget         1631\n",
       "               Average        1505\n",
       "               Expensive       291\n",
       "               Extravagant      28\n",
       "Staten Island  Budget          124\n",
       "               Average         123\n",
       "               Expensive        20\n",
       "               Extravagant       0\n",
       "Name: price_range, dtype: int64"
      ]
     },
     "execution_count": 157,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "prices_by_borough"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0b4d4585",
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 158,
   "id": "3b5974a8",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Step 10. Storing the final result"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 159,
   "id": "9e867ea6",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "{'avg_price': 141.82, 'average_price_per_month': 4313.61, 'difference': 1213.61, 'room_frequencies': entire home/apt    13266\n",
      "private room       11356\n",
      "shared room          587\n",
      "Name: room_type, dtype: int64, 'first_reviewed': datetime.date(2019, 1, 1), 'last_reviewed': datetime.date(2019, 7, 9), 'prices_by_borough': borough        price_range\n",
      "Bronx          Budget          381\n",
      "               Average         285\n",
      "               Expensive        25\n",
      "               Extravagant       5\n",
      "Brooklyn       Budget         3194\n",
      "               Average        5532\n",
      "               Expensive      1466\n",
      "               Extravagant     259\n",
      "Manhattan      Budget         1148\n",
      "               Average        5285\n",
      "               Expensive      3072\n",
      "               Extravagant     810\n",
      "Queens         Budget         1631\n",
      "               Average        1505\n",
      "               Expensive       291\n",
      "               Extravagant      28\n",
      "Staten Island  Budget          124\n",
      "               Average         123\n",
      "               Expensive        20\n",
      "               Extravagant       0\n",
      "Name: price_range, dtype: int64}\n"
     ]
    }
   ],
   "source": [
    "solution = {'avg_price':avg_price,\n",
    "            'average_price_per_month': average_price_per_month,  \n",
    "            'difference':difference,          \n",
    "            'room_frequencies':room_frequencies, \n",
    "            'first_reviewed': first_reviewed,\n",
    "            'last_reviewed': last_reviewed,\n",
    "            'prices_by_borough':prices_by_borough}\n",
    "print(solution)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 162,
   "id": "8990b6db",
   "metadata": {},
   "outputs": [],
   "source": [
    "# Export the DataFrame to a CSV file\n",
    "\n",
    "airbnb_merged.to_csv('cleaned_and_merged_data.csv', index=False)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 163,
   "id": "30dddac4",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "251840"
      ]
     },
     "execution_count": 163,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "airbnb_merged.size"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "7abf3640",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  },
  "toc": {
   "base_numbering": 1,
   "nav_menu": {},
   "number_sections": true,
   "sideBar": true,
   "skip_h1_title": false,
   "title_cell": "Table of Contents",
   "title_sidebar": "Contents",
   "toc_cell": false,
   "toc_position": {},
   "toc_section_display": true,
   "toc_window_display": false
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
